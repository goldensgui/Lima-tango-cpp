/*----- PROTECTED REGION ID(Dhyana.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        Dhyana.cpp
//
// description : C++ source for the Dhyana class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               Dhyana are implemented in this file.
//
// project :     Device specific for Dhyana detector
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <tango.h>
#include <helpers/PogoHelper.h>
#include <Dhyana.h>
#include <DhyanaClass.h>
#include <DhyanaCamera.h>

/*----- PROTECTED REGION END -----*/	//	Dhyana.cpp

/**
 *  Dhyana class description:
 *    Interface the camera Dhyana using  the TUCAM Library
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  dev_state
//  Status        |  Inherited (no method)
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  tucamVersion       |  Tango::DevString	Scalar
//  temperature        |  Tango::DevDouble	Scalar
//  temperatureTarget  |  Tango::DevDouble	Scalar
//  fanSpeed           |  Tango::DevUShort	Scalar
//  globalGain         |  Tango::DevString	Scalar
//  fps                |  Tango::DevDouble	Scalar
//  channel1           |  Tango::DevEnum	Scalar
//  channel2           |  Tango::DevEnum	Scalar
//  channel3           |  Tango::DevEnum	Scalar
//================================================================

namespace Dhyana_ns
{
/*----- PROTECTED REGION ID(Dhyana::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	Dhyana::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : Dhyana::Dhyana()
 *	Description : Constructors for a Tango device
 *                implementing the classDhyana
 */
//--------------------------------------------------------
Dhyana::Dhyana(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(Dhyana::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	Dhyana::constructor_1
}
//--------------------------------------------------------
Dhyana::Dhyana(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(Dhyana::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	Dhyana::constructor_2
}
//--------------------------------------------------------
Dhyana::Dhyana(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(Dhyana::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	Dhyana::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : Dhyana::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void Dhyana::delete_device()
{
	DEBUG_STREAM << "Dhyana::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(Dhyana::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	DELETE_DEVSTRING_ATTRIBUTE(attr_tucamVersion_read);
	DELETE_DEVSTRING_ATTRIBUTE(attr_globalGain_read);	
	DELETE_SCALAR_ATTRIBUTE(attr_temperatureTarget_read);
	DELETE_SCALAR_ATTRIBUTE(attr_temperature_read);
	DELETE_SCALAR_ATTRIBUTE(attr_fanSpeed_read);
	DELETE_SCALAR_ATTRIBUTE(attr_fps_read);
	//	Delete device allocated objects

	INFO_STREAM << "Remove the inner-appender." << endl;
    yat4tango::InnerAppender::release(this);

	//!!!! ONLY LimaDetector device can do this !!!!
	//if(m_ct!=0)
	//{
	//    ControlFactory::instance().reset("Dhyana");
	//    m_ct = 0;
	//}

	/*----- PROTECTED REGION END -----*/	//	Dhyana::delete_device
	delete[] attr_channel1_read;
	delete[] attr_channel2_read;
	delete[] attr_channel3_read;
}

//--------------------------------------------------------
/**
 *	Method      : Dhyana::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void Dhyana::init_device()
{
	DEBUG_STREAM << "Dhyana::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(Dhyana::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	

	/*----- PROTECTED REGION END -----*/	//	Dhyana::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	attr_channel1_read = new channel1Enum[1];
	attr_channel2_read = new channel2Enum[1];
	attr_channel3_read = new channel3Enum[1];
	/*----- PROTECTED REGION ID(Dhyana::init_device) ENABLED START -----*/
	
	//	Initialize device

	CREATE_DEVSTRING_ATTRIBUTE(attr_tucamVersion_read, MAX_ATTRIBUTE_STRING_LENGTH);
	CREATE_DEVSTRING_ATTRIBUTE(attr_globalGain_read, MAX_ATTRIBUTE_STRING_LENGTH);
	CREATE_SCALAR_ATTRIBUTE(attr_temperatureTarget_read, 0.0);
	CREATE_SCALAR_ATTRIBUTE(attr_temperature_read, 0.0);
	CREATE_SCALAR_ATTRIBUTE(attr_fanSpeed_read);
	CREATE_SCALAR_ATTRIBUTE(attr_fps_read);


	m_is_device_initialized = false;
	set_state(Tango::INIT);
	m_status_message.str("");
	
	INFO_STREAM << "Create the inner-appender in order to manage logs." << endl;  
    yat4tango::InnerAppender::initialize(this, 512);

	try
	{
		//- get the main object used to pilot the lima framework
		//in fact LimaDetector is create the singleton control objet
		//so this call, will only return existing object, no need to give it the ip !!
		m_ct = ControlFactory::instance().get_control("Dhyana");

		//- get interface to specific camera
		m_hw = dynamic_cast<lima::Dhyana::Interface*> (m_ct->hwInterface());

		//- get camera to specific detector
		m_camera = &(m_hw->getCamera());
	}
	catch(Exception& e)
	{
		ERROR_STREAM << "Initialization Failed : " << e.getErrMsg() << endl;
		m_status_message << "Initialization Failed : " << e.getErrMsg() << endl;
		m_is_device_initialized = false;
		set_state(Tango::FAULT);
		return;
	}
	catch(...)
	{
		ERROR_STREAM << "Initialization Failed : UNKNOWN" << endl;
		m_status_message << "Initialization Failed : UNKNOWN" << endl;
		set_state(Tango::FAULT);
		m_is_device_initialized = false;
		return;
	}

	m_is_device_initialized = true;
	try
	{
		INFO_STREAM << "Write tango hardware at Init - temperatureTarget." << endl;
		Tango::WAttribute &temperatureTarget = dev_attr->get_w_attr_by_name("temperatureTarget");
		*attr_temperatureTarget_read = memorizedTemperatureTarget;
		temperatureTarget.set_write_value(*attr_temperatureTarget_read);
		write_temperatureTarget(temperatureTarget);

		INFO_STREAM << "Write tango hardware at Init - fanSpeed." << endl;
		Tango::WAttribute &fanSpeed = dev_attr->get_w_attr_by_name("fanSpeed");
		*attr_fanSpeed_read = memorizedFanSpeed;
		fanSpeed.set_write_value(*attr_fanSpeed_read);
		write_fanSpeed(fanSpeed);

		INFO_STREAM << "Write tango hardware at Init - globalGain." << endl;
		Tango::WAttribute &globalGain = dev_attr->get_w_attr_by_name("globalGain");
		strcpy(*attr_globalGain_read, memorizedGlobalGain.c_str());
		m_global_gain = memorizedGlobalGain;
		globalGain.set_write_value(*attr_globalGain_read);
		write_globalGain(globalGain);

	}
	catch(Tango::DevFailed& df)
	{
		ERROR_STREAM << df << endl;
		m_status_message << "Initialization Failed : ";
		for(unsigned i = 0;i < df.errors.length();i++)
		{
			m_status_message << df.errors[i].desc << endl;
		}
		m_is_device_initialized = false;
		set_state(Tango::FAULT);
		return;
	}
	catch(Exception& e)
	{
		ERROR_STREAM << "Initialization Failed : " << e.getErrMsg() << endl;
		m_status_message << "Initialization Failed : " << e.getErrMsg() << endl;
		m_is_device_initialized = false;
		set_state(Tango::FAULT);
		return;
	}

	set_state(Tango::STANDBY);
	dev_state();

	/*----- PROTECTED REGION END -----*/	//	Dhyana::init_device
}

//--------------------------------------------------------
/**
 *	Method      : Dhyana::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void Dhyana::get_device_property()
{
	/*----- PROTECTED REGION ID(Dhyana::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
	

	/*----- PROTECTED REGION END -----*/	//	Dhyana::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("MemorizedTemperatureTarget"));
	dev_prop.push_back(Tango::DbDatum("MemorizedFanSpeed"));
	dev_prop.push_back(Tango::DbDatum("MemorizedGlobalGain"));
	dev_prop.push_back(Tango::DbDatum("__ExpertTimerPeriod"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on DhyanaClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		DhyanaClass	*ds_class =
			(static_cast<DhyanaClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize MemorizedTemperatureTarget from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  memorizedTemperatureTarget;
		else {
			//	Try to initialize MemorizedTemperatureTarget from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  memorizedTemperatureTarget;
		}
		//	And try to extract MemorizedTemperatureTarget value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  memorizedTemperatureTarget;

		//	Try to initialize MemorizedFanSpeed from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  memorizedFanSpeed;
		else {
			//	Try to initialize MemorizedFanSpeed from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  memorizedFanSpeed;
		}
		//	And try to extract MemorizedFanSpeed value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  memorizedFanSpeed;

		//	Try to initialize MemorizedGlobalGain from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  memorizedGlobalGain;
		else {
			//	Try to initialize MemorizedGlobalGain from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  memorizedGlobalGain;
		}
		//	And try to extract MemorizedGlobalGain value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  memorizedGlobalGain;

		//	Try to initialize __ExpertTimerPeriod from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  __ExpertTimerPeriod;
		else {
			//	Try to initialize __ExpertTimerPeriod from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  __ExpertTimerPeriod;
		}
		//	And try to extract __ExpertTimerPeriod value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  __ExpertTimerPeriod;

	}

	/*----- PROTECTED REGION ID(Dhyana::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	PropertyHelper::create_property_if_empty(this, dev_prop,"0","MemorizedTemperatureTarget");	
	PropertyHelper::create_property_if_empty(this, dev_prop,"1","MemorizedFanSpeed");	
	PropertyHelper::create_property_if_empty(this, dev_prop,"LOW","MemorizedGlobalGain");	
	PropertyHelper::create_property_if_empty(this, dev_prop,"1","__ExpertTimerPeriod");

	/*----- PROTECTED REGION END -----*/	//	Dhyana::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : Dhyana::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void Dhyana::always_executed_hook()
{
	DEBUG_STREAM << "Dhyana::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(Dhyana::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	try
	{
		yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
		m_status_message.str("");
		//- get the singleton control objet used to pilot the lima framework
		m_ct = ControlFactory::instance().get_control("Dhyana");

		//- get interface to specific camera
		m_hw = dynamic_cast<lima::Dhyana::Interface*> (m_ct->hwInterface());

		//- get camera to specific detector
		m_camera = &(m_hw->getCamera());

		//update state
		dev_state();
	}
	catch(Exception& e)
	{
		ERROR_STREAM << e.getErrMsg() << endl;
		m_status_message << "Initialization Failed : " << e.getErrMsg() << endl;
		//- throw exception
		set_state(Tango::FAULT);
		m_is_device_initialized = false;
		return;
	}
	catch(...)
	{
		ERROR_STREAM << "Initialization Failed : UNKNOWN" << endl;
		m_status_message << "Initialization Failed : UNKNOWN" << endl;
		//- throw exception
		set_state(Tango::FAULT);
		m_is_device_initialized = false;
		return;
	}

	/*----- PROTECTED REGION END -----*/	//	Dhyana::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : Dhyana::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void Dhyana::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "Dhyana::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(Dhyana::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	//	Add your own code here

	/*----- PROTECTED REGION END -----*/	//	Dhyana::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : Dhyana::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void Dhyana::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "Dhyana::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(Dhyana::write_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	Dhyana::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute tucamVersion related method
 *	Description: Dhyana Tucam Version.
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Dhyana::read_tucamVersion(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Dhyana::read_tucamVersion(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Dhyana::read_tucamVersion) ENABLED START -----*/
	yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
	try
	{
		std::string version;
		m_camera->getTucamVersion(version);
		strcpy(*attr_tucamVersion_read, version.c_str());

		attr.set_value(attr_tucamVersion_read);
	}
	catch(Tango::DevFailed& df)
	{
		ERROR_STREAM << df << endl;
		//- rethrow exception
		Tango::Except::re_throw_exception(df,
										  "TANGO_DEVICE_ERROR",
										  string(df.errors[0].desc).c_str(),
										  "Dhyana::read_tucamVersion");
	}
	catch(Exception& e)
	{
		ERROR_STREAM << e.getErrMsg() << endl;
		//- throw exception
		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
									   e.getErrMsg().c_str(),
									   "Dhyana::read_tucamVersion");
	}

	/*----- PROTECTED REGION END -----*/	//	Dhyana::read_tucamVersion
}
//--------------------------------------------------------
/**
 *	Read attribute temperature related method
 *	Description: Get Temperature of the detector (in Celsius)
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Dhyana::read_temperature(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Dhyana::read_temperature(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Dhyana::read_temperature) ENABLED START -----*/
	yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
	try
	{
		double value;
		m_camera->getTemperature(value);
		*attr_temperature_read = value;
		attr.set_value(attr_temperature_read);
	}
	catch(Tango::DevFailed& df)
	{
		ERROR_STREAM << df << endl;
		//- rethrow exception
		Tango::Except::re_throw_exception(df,
										  "TANGO_DEVICE_ERROR",
										  string(df.errors[0].desc).c_str(),
										  "Dhyana::read_temperature");
	}
	catch(Exception& e)
	{
		ERROR_STREAM << e.getErrMsg() << endl;
		//- throw exception
		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
									   e.getErrMsg().c_str(),
									   "Dhyana::read_temperature");
	}

	/*----- PROTECTED REGION END -----*/	//	Dhyana::read_temperature
}
//--------------------------------------------------------
/**
 *	Read attribute temperatureTarget related method
 *	Description: Set the Temperature target of the detector (in Celsius)
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Dhyana::read_temperatureTarget(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Dhyana::read_temperatureTarget(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Dhyana::read_temperatureTarget) ENABLED START -----*/
	yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
	try
	{
		double value;
		m_camera->getTemperatureTarget(value);
		*attr_temperatureTarget_read = value;
		attr.set_value(attr_temperatureTarget_read);
	}
	catch(Tango::DevFailed& df)
	{
		ERROR_STREAM << df << endl;
		//- rethrow exception
		Tango::Except::re_throw_exception(df,
										  "TANGO_DEVICE_ERROR",
										  string(df.errors[0].desc).c_str(),
										  "Dhyana::read_temperatureTarget");
	}
	catch(Exception& e)
	{
		ERROR_STREAM << e.getErrMsg() << endl;
		//- throw exception
		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
									   e.getErrMsg().c_str(),
									   "Dhyana::read_temperatureTarget");
	}

	/*----- PROTECTED REGION END -----*/	//	Dhyana::read_temperatureTarget
}
//--------------------------------------------------------
/**
 *	Write attribute temperatureTarget related method
 *	Description: Set the Temperature target of the detector (in Celsius)
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Dhyana::write_temperatureTarget(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Dhyana::write_temperatureTarget(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	/*----- PROTECTED REGION ID(Dhyana::write_temperatureTarget) ENABLED START -----*/
	// the variable w_val will not be used !
	yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
	try
	{
		attr.get_write_value(attr_temperatureTarget_write);
		m_camera->setTemperatureTarget(attr_temperatureTarget_write);
		yat4tango::PropertyHelper::set_property(this, "MemorizedTemperatureTarget", attr_temperatureTarget_write);
	}
	catch(Tango::DevFailed& df)
	{
		ERROR_STREAM << df << endl;
		//- rethrow exception
		Tango::Except::re_throw_exception(df,
										  "TANGO_DEVICE_ERROR",
										  string(df.errors[0].desc).c_str(),
										  "Dhyana::write_temperatureTarget");
	}
	catch(Exception& e)
	{
		ERROR_STREAM << e.getErrMsg() << endl;
		//- throw exception
		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
									   e.getErrMsg().c_str(),
									   "Dhyana::write_temperatureTarget");
	}

	/*----- PROTECTED REGION END -----*/	//	Dhyana::write_temperatureTarget
}
//--------------------------------------------------------
/**
 *	Read attribute fanSpeed related method
 *	Description: Define the fan speed of the detector [0..5]
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Dhyana::read_fanSpeed(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Dhyana::read_fanSpeed(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Dhyana::read_fanSpeed) ENABLED START -----*/
	yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
	try
	{
		unsigned value;
		m_camera->getFanSpeed(value);
		*attr_fanSpeed_read = value;
		attr.set_value(attr_fanSpeed_read);
	}
	catch(Tango::DevFailed& df)
	{
		ERROR_STREAM << df << endl;
		//- rethrow exception
		Tango::Except::re_throw_exception(df,
										  "TANGO_DEVICE_ERROR",
										  string(df.errors[0].desc).c_str(),
										  "Dhyana::read_fanSpeed");
	}
	catch(Exception& e)
	{
		ERROR_STREAM << e.getErrMsg() << endl;
		//- throw exception
		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
									   e.getErrMsg().c_str(),
									   "Dhyana::read_fanSpeed");
	}

	/*----- PROTECTED REGION END -----*/	//	Dhyana::read_fanSpeed
}
//--------------------------------------------------------
/**
 *	Write attribute fanSpeed related method
 *	Description: Define the fan speed of the detector [0..5]
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Dhyana::write_fanSpeed(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Dhyana::write_fanSpeed(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevUShort	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Dhyana::write_fanSpeed) ENABLED START -----*/
	// the variable w_val will not be used !
	yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
	try
	{
		attr.get_write_value(attr_fanSpeed_write);
		m_camera->setFanSpeed(attr_fanSpeed_write);
		yat4tango::PropertyHelper::set_property(this, "MemorizedFanSpeed", attr_fanSpeed_write);
	}
	catch(Tango::DevFailed& df)
	{
		ERROR_STREAM << df << endl;
		//- rethrow exception
		Tango::Except::re_throw_exception(df,
										  "TANGO_DEVICE_ERROR",
										  string(df.errors[0].desc).c_str(),
										  "Dhyana::write_fanSpeed");
	}
	catch(Exception& e)
	{
		ERROR_STREAM << e.getErrMsg() << endl;
		//- throw exception
		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
									   e.getErrMsg().c_str(),
									   "Dhyana::write_fanSpeed");
	}

	/*----- PROTECTED REGION END -----*/	//	Dhyana::write_fanSpeed
}
//--------------------------------------------------------
/**
 *	Read attribute globalGain related method
 *	Description: Define the gain of the detector [LOW, HIGH, HDR]
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Dhyana::read_globalGain(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Dhyana::read_globalGain(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Dhyana::read_globalGain) ENABLED START -----*/
	yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
	try
	{
		unsigned nVal;
		std::string gain;
		m_camera->getGlobalGain(nVal);
		if(nVal == 2)
			gain = "LOW";
		else if(nVal == 1)
			gain = "HIGH";
		else //(nVal == 0)
			gain = "HDR";
		strcpy(*attr_globalGain_read, gain.c_str());
		attr.set_value(attr_globalGain_read);
	}
	catch(Tango::DevFailed& df)
	{

		ERROR_STREAM << df << endl;
		//- rethrow exception
		Tango::Except::re_throw_exception(df,
										  "TANGO_DEVICE_ERROR",
										  std::string(df.errors[0].desc).c_str(),
										  "Dhyana::read_globalGain");
	}

	/*----- PROTECTED REGION END -----*/	//	Dhyana::read_globalGain
}
//--------------------------------------------------------
/**
 *	Write attribute globalGain related method
 *	Description: Define the gain of the detector [LOW, HIGH, HDR]
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Dhyana::write_globalGain(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Dhyana::write_globalGain(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevString	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Dhyana::write_globalGain) ENABLED START -----*/
	// the variable w_val will not be used !
	yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
	try
	{
		m_global_gain = *attr_globalGain_read;//memorize previous valid value
		attr.get_write_value(attr_globalGain_write);
		std::string current = attr_globalGain_write;
		transform(current.begin(), current.end(), current.begin(), ::toupper);
		if((current != "LOW") &&
		   (current != "HIGH") &&
		   (current != "HDR")
		   )
		{
			attr_globalGain_write = const_cast<Tango::DevString> (m_global_gain.c_str());
			Tango::Except::throw_exception("CONFIGURATION_ERROR",
										   "Possible globalGain values are :"
										   "\nHDR"
										   "\nHIGH"
										   "\nLOW\n",
										   "Dhyana::write_globalGain");
		}

		//- THIS IS AN AVAILABLE globalGain     
		m_global_gain = current;
		unsigned nVal;
		if(m_global_gain == "LOW")
			nVal = 2;
		else if(m_global_gain == "HIGH")
			nVal = 1;
		else //(m_global_gain == "HDR")
			nVal = 0;
		m_camera->setGlobalGain(nVal);
		PropertyHelper::set_property(this, "MemorizedGlobalGain", m_global_gain);
	}
	catch(Tango::DevFailed& df)
	{

		ERROR_STREAM << df << endl;
		//- rethrow exception
		Tango::Except::re_throw_exception(df,
										  "TANGO_DEVICE_ERROR",
										  std::string(df.errors[0].desc).c_str(),
										  "Dhyana::write_globalGain");
	}

	/*----- PROTECTED REGION END -----*/	//	Dhyana::write_globalGain
}
//--------------------------------------------------------
/**
 *	Read attribute fps related method
 *	Description: The last computed frame per second (the value is computed every 100 frames only)
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Dhyana::read_fps(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Dhyana::read_fps(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Dhyana::read_fps) ENABLED START -----*/
	try
	{
		double fps = 0.0;
		m_camera->getFPS(fps);
		*attr_fps_read = fps;
		attr.set_value(attr_fps_read);
	}
    catch(Tango::DevFailed & df)
    {
		ERROR_STREAM << df << endl;
		//- rethrow exception
        Tango::Except::re_throw_exception(df,
										  "TANGO_DEVICE_ERROR",
										  string(df.errors[0].desc).c_str(),
										  "Dhyana::read_fps");
    }
    catch(Exception & e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
		//- throw exception
		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
									   e.getErrMsg().c_str(),
									   "Dhyana::read_fps");
    }

	/*----- PROTECTED REGION END -----*/	//	Dhyana::read_fps
}
//--------------------------------------------------------
/**
 *	Read attribute channel1 related method
 *	Description: 
 *
 *	Data type:	Tango::DevEnum (channel1Enum)
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Dhyana::read_channel1(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Dhyana::read_channel1(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Dhyana::read_channel1) ENABLED START -----*/
	//	Set the attribute value	
	try
	{
		int channel = 0;
		lima::Dhyana::Camera::TucamSignal signal = lima::Dhyana::Camera::TucamSignal::SignalTrigIn;
		m_camera->getOutputSignal1(channel, signal);

		Tango::DevShort* sh;
		std::clog << "Signal 1 : " << signal << std::endl;

		switch (signal)
		{
			case lima::Dhyana::Camera::SignalStart : sh = (Tango::DevShort*) channel1Enum::_EXPOSURESTART1; break;

			case lima::Dhyana::Camera::SignalGlobal : sh = (Tango::DevShort*) channel1Enum::_GLOBAL1; break;

			case lima::Dhyana::Camera::SignalReadEnd : sh = (Tango::DevShort*) channel1Enum::_READOUT1; break;
		}

		//*attr_channel1_read = (channel1Enum)signal;
		attr.set_value( (Tango::DevShort*) &sh);
	}
    catch(Tango::DevFailed & df)
    {
		ERROR_STREAM << df << endl;
		//- rethrow exception
        Tango::Except::re_throw_exception(df,
										  "TANGO_DEVICE_ERROR",
										  string(df.errors[0].desc).c_str(),
										  "Dhyana::read_channel1");
    }
    catch(Exception & e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
		//- throw exception
		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
									   e.getErrMsg().c_str(),
									   "Dhyana::read_channel1");
    }
	
	/*----- PROTECTED REGION END -----*/	//	Dhyana::read_channel1
}
//--------------------------------------------------------
/**
 *	Write attribute channel1 related method
 *	Description: 
 *
 *	Data type:	Tango::DevEnum (channel1Enum)
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Dhyana::write_channel1(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Dhyana::write_channel1(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	
	try
	{
		int channel = 0;
		lima::Dhyana::Camera::TucamSignal signal = lima::Dhyana::Camera::TucamSignal::SignalTrigIn;
		attr.get_write_value(attr_channel1_write);

		switch(attr_channel1_write)
		{
			case channel1Enum::_EXPOSURESTART1 : signal = lima::Dhyana::Camera::TucamSignal::SignalStart; break;

			case channel1Enum::_GLOBAL1 : signal = lima::Dhyana::Camera::TucamSignal::SignalGlobal; break;

			case channel1Enum::_READOUT1 : signal = lima::Dhyana::Camera::TucamSignal::SignalReadEnd; break;
		}
		m_camera->setOutputSignal(channel, signal);
	}
    catch(Tango::DevFailed & df)
    {
		ERROR_STREAM << df << endl;
		//- rethrow exception
        Tango::Except::re_throw_exception(df,
										  "TANGO_DEVICE_ERROR",
										  string(df.errors[0].desc).c_str(),
										  "Dhyana::write_channel1");
    }
    catch(Exception & e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
		//- throw exception
		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
									   e.getErrMsg().c_str(),
									   "Dhyana::write_channel1");
    }
	/*----- PROTECTED REGION ID(Dhyana::write_channel1) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	Dhyana::write_channel1
}
//--------------------------------------------------------
/**
 *	Read attribute channel2 related method
 *	Description: 
 *
 *	Data type:	Tango::DevEnum (channel2Enum)
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Dhyana::read_channel2(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Dhyana::read_channel2(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Dhyana::read_channel2) ENABLED START -----*/
	//	Set the attribute value
	try
	{
		int channel = 1;
		lima::Dhyana::Camera::TucamSignal signal = lima::Dhyana::Camera::TucamSignal::SignalTrigIn;
		m_camera->getOutputSignal2(channel, signal);
		std::clog << "Signal 2 : " << signal << std::endl;

		Tango::DevShort* sh;

		switch (signal)
		{
			case lima::Dhyana::Camera::SignalStart : sh = (Tango::DevShort*) channel2Enum::_EXPOSURESTART2; break;

			case lima::Dhyana::Camera::SignalGlobal : sh = (Tango::DevShort*) channel2Enum::_GLOBAL2; break;

			case lima::Dhyana::Camera::SignalReadEnd : sh = (Tango::DevShort*) channel2Enum::_READOUT2; break;
		}

		attr.set_value( (Tango::DevShort*) &sh);
	}
    catch(Tango::DevFailed & df)
    {
		ERROR_STREAM << df << endl;
		//- rethrow exception
        Tango::Except::re_throw_exception(df,
										  "TANGO_DEVICE_ERROR",
										  string(df.errors[0].desc).c_str(),
										  "Dhyana::read_channel2");
    }
    catch(Exception & e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
		//- throw exception
		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
									   e.getErrMsg().c_str(),
									   "Dhyana::read_channel2");
    }
	
	/*----- PROTECTED REGION END -----*/	//	Dhyana::read_channel2
}
//--------------------------------------------------------
/**
 *	Write attribute channel2 related method
 *	Description: 
 *
 *	Data type:	Tango::DevEnum (channel2Enum)
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Dhyana::write_channel2(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Dhyana::write_channel2(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	try
	{
		int channel = 1;
		lima::Dhyana::Camera::TucamSignal signal = lima::Dhyana::Camera::TucamSignal::SignalTrigIn;
		attr.get_write_value(attr_channel2_write);

		switch(attr_channel2_write)
		{
			case channel2Enum::_EXPOSURESTART2 : signal = lima::Dhyana::Camera::TucamSignal::SignalStart; break;

			case channel2Enum::_GLOBAL2 : signal = lima::Dhyana::Camera::TucamSignal::SignalGlobal; break;

			case channel2Enum::_READOUT2 : signal = lima::Dhyana::Camera::TucamSignal::SignalReadEnd; break;
		}
		m_camera->setOutputSignal(channel, signal);
	}
    catch(Tango::DevFailed & df)
    {
		ERROR_STREAM << df << endl;
		//- rethrow exception
        Tango::Except::re_throw_exception(df,
										  "TANGO_DEVICE_ERROR",
										  string(df.errors[0].desc).c_str(),
										  "Dhyana::write_channel2");
    }
    catch(Exception & e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
		//- throw exception
		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
									   e.getErrMsg().c_str(),
									   "Dhyana::write_channel2");
    }
	/*----- PROTECTED REGION ID(Dhyana::write_channel2) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	Dhyana::write_channel2
}
//--------------------------------------------------------
/**
 *	Read attribute channel3 related method
 *	Description: 
 *
 *	Data type:	Tango::DevEnum (channel3Enum)
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Dhyana::read_channel3(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Dhyana::read_channel3(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Dhyana::read_channel3) ENABLED START -----*/
	//	Set the attribute value
	try
	{
		int channel = 2;
		lima::Dhyana::Camera::TucamSignal signal = lima::Dhyana::Camera::TucamSignal::SignalTrigIn;
		m_camera->getOutputSignal3(channel, signal);

		std::clog << "Signal 3 : " << signal << std::endl;

		Tango::DevShort* sh;

		switch (signal)
		{
			case lima::Dhyana::Camera::SignalStart : sh = (Tango::DevShort*) channel3Enum::_EXPOSURESTART3; break;

			case lima::Dhyana::Camera::SignalGlobal : sh = (Tango::DevShort*) channel3Enum::_GLOBAL3; break;

			case lima::Dhyana::Camera::SignalReadEnd : sh = (Tango::DevShort*) channel3Enum::_READOUT3; break;
		}

		attr.set_value( (Tango::DevShort*) &sh);
	}
    catch(Tango::DevFailed & df)
    {
		ERROR_STREAM << df << endl;
		//- rethrow exception
        Tango::Except::re_throw_exception(df,
										  "TANGO_DEVICE_ERROR",
										  string(df.errors[0].desc).c_str(),
										  "Dhyana::read_channel3");
    }
    catch(Exception & e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
		//- throw exception
		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
									   e.getErrMsg().c_str(),
									   "Dhyana::read_channel3");
    }
	
	/*----- PROTECTED REGION END -----*/	//	Dhyana::read_channel3
}
//--------------------------------------------------------
/**
 *	Write attribute channel3 related method
 *	Description: 
 *
 *	Data type:	Tango::DevEnum (channel3Enum)
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Dhyana::write_channel3(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Dhyana::write_channel3(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	try
	{
		int channel = 2;
		lima::Dhyana::Camera::TucamSignal signal = lima::Dhyana::Camera::TucamSignal::SignalTrigIn;
		attr.get_write_value(attr_channel3_write);

		switch(attr_channel3_write)
		{
			case channel3Enum::_EXPOSURESTART3 : signal = lima::Dhyana::Camera::TucamSignal::SignalStart; break;

			case channel3Enum::_GLOBAL3 : signal = lima::Dhyana::Camera::TucamSignal::SignalGlobal; break;

			case channel3Enum::_READOUT3 : signal = lima::Dhyana::Camera::TucamSignal::SignalReadEnd; break;
		}
		m_camera->setOutputSignal(channel, signal);
	}
    catch(Tango::DevFailed & df)
    {
		ERROR_STREAM << df << endl;
		//- rethrow exception
        Tango::Except::re_throw_exception(df,
										  "TANGO_DEVICE_ERROR",
										  string(df.errors[0].desc).c_str(),
										  "Dhyana::write_channel3");
    }
    catch(Exception & e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
		//- throw exception
		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
									   e.getErrMsg().c_str(),
									   "Dhyana::write_channel3");
    }
	/*----- PROTECTED REGION ID(Dhyana::write_channel3) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	Dhyana::write_channel3
}

//--------------------------------------------------------
/**
 *	Method      : Dhyana::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void Dhyana::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(Dhyana::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	Dhyana::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command State related method
 *	Description: This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *
 *	@returns State Code
 */
//--------------------------------------------------------
Tango::DevState Dhyana::dev_state()
{
	DEBUG_STREAM << "Dhyana::State()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Dhyana::dev_state) ENABLED START -----*/
	
	//	Add your own code
	Tango::DevState argout = DeviceImpl::dev_state();
	DEBUG_STREAM << "Dhyana::dev_state(): entering... !" << endl;

	//    Add your own code to control device here
	stringstream DeviceStatus;
	DeviceStatus << "";
	Tango::DevState DeviceState = Tango::STANDBY;
	if(!m_is_device_initialized)
	{
		DeviceState = Tango::FAULT;
		DeviceStatus << m_status_message.str();
	}
	else
	{
		// state & status are retrieved from Factory, Factory is updated by Generic device
		DeviceState = ControlFactory::instance().get_state();
		DeviceStatus << ControlFactory::instance().get_status();
	}

	set_state(DeviceState);
	set_status(DeviceStatus.str());

	argout = DeviceState;

	/*----- PROTECTED REGION END -----*/	//	Dhyana::dev_state
	set_state(argout);    // Give the state to Tango.
	if (argout!=Tango::ALARM)
		DeviceImpl::dev_state();
	return get_state();  // Return it after Tango management.
}
//--------------------------------------------------------
/**
 *	Method      : Dhyana::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void Dhyana::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(Dhyana::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	Dhyana::add_dynamic_commands
}

/*----- PROTECTED REGION ID(Dhyana::namespace_ending) ENABLED START -----*/

//	Additional Methods
//+----------------------------------------------------------------------------
//
// method : 		Dhyana::Dhyana(string &s)
// 
// description : 	constructor for simulated Dhyana
//
// in : - cl : Pointer to the DeviceClass object
//      - s : Device name 
//
//-----------------------------------------------------------------------------



/*----- PROTECTED REGION END -----*/	//	Dhyana::namespace_ending
} //	namespace
