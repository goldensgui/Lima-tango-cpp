/*----- PROTECTED REGION ID(Dhyana.h) ENABLED START -----*/
//=============================================================================
//
// file :        Dhyana.h
//
// description : Include file for the Dhyana class
//
// project :     Device specific for Dhyana detector
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef Dhyana_H
#define Dhyana_H

#include <tango.h>
#include "Factory.h"
#include "lima/HwInterface.h"
#include "lima/CtControl.h"
#include "lima/CtAcquisition.h"
#include "lima/CtImage.h"
#include <yat4tango/PropertyHelper.h>
#include <yat4tango/InnerAppender.h>
#include "DhyanaInterface.h"


#include "Factory.h"

#include "lima/HwInterface.h"
#include "lima/CtControl.h"
#include "lima/CtAcquisition.h"
#include "lima/CtImage.h"

#include <yat4tango/PropertyHelper.h>
#include <yat4tango/InnerAppender.h>

#include "DhyanaInterface.h"
#include "DhyanaCamera.h"

#define MAX_ATTRIBUTE_STRING_LENGTH     256
#define TUCAM_VERSION  "1.0.0"


using namespace lima;
using namespace std;
using namespace yat4tango;
 
/*----- PROTECTED REGION END -----*/	//	Dhyana.h

/**
 *  Dhyana class description:
 *    Interface the camera Dhyana using  the TUCAM Library
 */

namespace Dhyana_ns
{
enum _channel1Enum : short
{
	_EXPOSURESTART1,
	_READOUT1,
	_GLOBAL1,
} ;
typedef _channel1Enum channel1Enum;

enum _channel2Enum : short
{
	_EXPOSURESTART2,
	_READOUT2,
	_GLOBAL2,
} ;
typedef _channel2Enum channel2Enum;

enum _channel3Enum : short
{
	_EXPOSURESTART3,
	_READOUT3,
	_GLOBAL3,
} ;
typedef _channel3Enum channel3Enum;

/*----- PROTECTED REGION ID(Dhyana::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations

/*----- PROTECTED REGION END -----*/	//	Dhyana::Additional Class Declarations

class Dhyana : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(Dhyana::Data Members) ENABLED START -----*/

//	Add your own data members
public:

/*----- PROTECTED REGION END -----*/	//	Dhyana::Data Members

//	Device property data members
public:
	//	MemorizedTemperatureTarget:	Memorize/Define the temperatureTarget  attribute  at Init device<br>
	Tango::DevDouble	memorizedTemperatureTarget;
	//	MemorizedFanSpeed:	Memorize/Define the fanSpeed  attribute  at Init device<br>
	Tango::DevUShort	memorizedFanSpeed;
	//	MemorizedGlobalGain:	Memorize/Define the globalGain  attribute  at Init device<br>
	string	memorizedGlobalGain;
	//	__ExpertTimerPeriod:	Timer period in ms.<cr>
	//  useful only for Internal Trigger
	Tango::DevUShort	__ExpertTimerPeriod;

//	Attribute data members
public:
	Tango::DevString	*attr_tucamVersion_read;
	Tango::DevDouble	*attr_temperature_read;
	Tango::DevDouble	*attr_temperatureTarget_read;
	Tango::DevDouble	attr_temperatureTarget_write;
	Tango::DevUShort	*attr_fanSpeed_read;
	Tango::DevUShort	attr_fanSpeed_write;
	Tango::DevString	*attr_globalGain_read;
	Tango::DevString	attr_globalGain_write;
	Tango::DevDouble	*attr_fps_read;
	channel1Enum	*attr_channel1_read;
	channel2Enum	*attr_channel2_read;
	channel3Enum	*attr_channel3_read;
	channel1Enum	attr_channel1_write;
	channel2Enum	attr_channel2_write;
	channel3Enum	attr_channel3_write;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	Dhyana(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	Dhyana(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	Dhyana(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~Dhyana() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : Dhyana::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : Dhyana::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute tucamVersion related methods
 *	Description: Dhyana Tucam Version.
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_tucamVersion(Tango::Attribute &attr);
	virtual bool is_tucamVersion_allowed(Tango::AttReqType type);
/**
 *	Attribute temperature related methods
 *	Description: Get Temperature of the detector (in Celsius)
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_temperature(Tango::Attribute &attr);
	virtual bool is_temperature_allowed(Tango::AttReqType type);
/**
 *	Attribute temperatureTarget related methods
 *	Description: Set the Temperature target of the detector (in Celsius)
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_temperatureTarget(Tango::Attribute &attr);
	virtual void write_temperatureTarget(Tango::WAttribute &attr);
	virtual bool is_temperatureTarget_allowed(Tango::AttReqType type);
/**
 *	Attribute fanSpeed related methods
 *	Description: Define the fan speed of the detector [0..5]
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_fanSpeed(Tango::Attribute &attr);
	virtual void write_fanSpeed(Tango::WAttribute &attr);
	virtual bool is_fanSpeed_allowed(Tango::AttReqType type);
/**
 *	Attribute globalGain related methods
 *	Description: Define the gain of the detector [LOW, HIGH, HDR]
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_globalGain(Tango::Attribute &attr);
	virtual void write_globalGain(Tango::WAttribute &attr);
	virtual bool is_globalGain_allowed(Tango::AttReqType type);
/**
 *	Attribute fps related methods
 *	Description: The last computed frame per second (the value is computed every 100 frames only)
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_fps(Tango::Attribute &attr);
	virtual bool is_fps_allowed(Tango::AttReqType type);
/**
 *	Attribute channel1 related methods
 *	Description: 
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_channel1(Tango::Attribute &attr);
	virtual void write_channel1(Tango::WAttribute &attr);
	virtual bool is_channel1_allowed(Tango::AttReqType type);
/**
 *	Attribute channel2 related methods
 *	Description: 
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_channel2(Tango::Attribute &attr);
	virtual void write_channel2(Tango::WAttribute &attr);
	virtual bool is_channel2_allowed(Tango::AttReqType type);
/**
 *	Attribute channel3 related methods
 *	Description: 
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_channel3(Tango::Attribute &attr);
	virtual void write_channel3(Tango::WAttribute &attr);
	virtual bool is_channel3_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : Dhyana::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command State related method
	 *	Description: This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
	 *
	 *	@returns State Code
	 */
	virtual Tango::DevState dev_state();


	//--------------------------------------------------------
	/**
	 *	Method      : Dhyana::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(Dhyana::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes
// return true if the device is correctly initialized in init_device
	bool is_device_initialized(){return m_is_device_initialized;};

protected :	
	//	Add your own data members here
	//-----------------------------------------
    //state & status stuff
    bool                      m_is_device_initialized ;
    stringstream              m_status_message;
    std::string               m_global_gain;
    
    //lima OBJECTS
    lima::Dhyana::Interface*  m_hw;
    lima::CtControl*          m_ct;
    lima::Dhyana::Camera*     m_camera;
/*----- PROTECTED REGION END -----*/	//	Dhyana::Additional Method prototypes
};

/*----- PROTECTED REGION ID(Dhyana::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	Dhyana::Additional Classes Definitions

}	//	End of namespace

#endif   //	Dhyana_H
