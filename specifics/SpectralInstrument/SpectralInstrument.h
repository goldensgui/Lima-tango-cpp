/*----- PROTECTED REGION ID(SpectralInstrument.h) ENABLED START -----*/
//=============================================================================
//
// file :        SpectralInstrument.h
//
// description : Include file for the Spectral Instrument class
//
// project :     Spectral Instrument detector TANGO specific device.
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef SpectralInstrument_H
#define SpectralInstrument_H

#include <tango.h>

//- YAT/YAT4TANGO
#include <yat4tango/PropertyHelper.h>
#include <yat4tango/DynamicInterfaceManager.h>

#include "Factory.h"

#include "lima/HwInterface.h"
#include "lima/CtControl.h"
#include "lima/CtAcquisition.h"
#include "lima/CtImage.h"

#include "SpectralInstrumentInterface.h"
#include "SpectralInstrumentCamera.h"

using namespace yat4tango;

/*----- PROTECTED REGION END -----*/	//	SpectralInstrument.h

/**
 *  Spectral Instrument class description:
 *    Device for detectors from Spectral Instruments. 
 */

namespace SpectralInstrument_ns
{
enum _readoutSpeedEnum {
	_1MHZ,
	_690KHZ,
} ;
typedef _readoutSpeedEnum readoutSpeedEnum;

/*----- PROTECTED REGION ID(SpectralInstrument::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations

/*----- PROTECTED REGION END -----*/	//	Spectral::Additional Class Declarations

class SpectralInstrument : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(SpectralInstrument::Data Members) ENABLED START -----*/

public:
	Tango::DevBoolean	attr_cooling_write;
	Tango::DevShort     attr_readout_speed_write;

	enum readoutSpeedValues : ushort
	{
		value_1MHZ = 18,
		value_690KHZ = 40,
	};

/*----- PROTECTED REGION END -----*/	//	SpectralInstrument::Data Members

//	Device property data members
public:
	//	ConnectionAddress:	Only an expert User could change this property.<br>
	//  Server name or IP address of the SI Image SGL II software.<BR>
	string	connectionAddress;
	//	ConnectionPort:	Only an expert User could change this property.<br>
	//  TCP/IP port of the SI Image SGL II software.<BR>
	Tango::DevLong	connectionPort;
	//	ImagePacketPixelsNb:	Only an expert User could change this property.<br>
	//  Number of pixels sent into a image part TCP/IP packet.<BR>
	Tango::DevLong	imagePacketPixelsNb;
	//	ImagePacketDelayMicroSec:	Only an expert User could change this property.<br>
	//  Delay between the sending of two image part TCP/IP packets (in micro-seconds).<BR>
	Tango::DevLong	imagePacketDelayMicroSec;

//	Attribute data members
public:
	Tango::DevBoolean	*attr_cooling_read;
	Tango::DevFloat	*attr_ccdTemperature_read;
	readoutSpeedEnum	*attr_readoutSpeed_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	SpectralInstrument(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	SpectralInstrument(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	SpectralInstrument(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~SpectralInstrument() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : SpectralInstrument::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : SpectralInstrument::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute cooling related methods
 *	Description: Turns the CCD cooling On/Off
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_cooling(Tango::Attribute &attr);
	virtual void write_cooling(Tango::WAttribute &attr);
	virtual bool is_cooling_allowed(Tango::AttReqType type);
/**
 *	Attribute ccdTemperature related methods
 *	Description: Camera temperature status (C)
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
	virtual void read_ccdTemperature(Tango::Attribute &attr);
	virtual bool is_ccdTemperature_allowed(Tango::AttReqType type);
/**
 *	Attribute readoutSpeed related methods
 *	Description: 
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_readoutSpeed(Tango::Attribute &attr);
	virtual void write_readoutSpeed(Tango::WAttribute &attr);
	virtual bool is_readoutSpeed_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : SpectralInstrument::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:


	//--------------------------------------------------------
	/**
	 *	Method      : SpectralInstrument::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(SpectralInstrument::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes
private:
/**
 * This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *	@return	State Code
 *	@exception DevFailed
 */
	Tango::DevState	dev_state();

/**
 *	method:	SlsEiger::manage_devfailed_exception
 *
 *	description: method which manages DevFailed exceptions
 */
    void manage_devfailed_exception(Tango::DevFailed & in_exception, const std::string & in_caller_method_name);

/**
 *	method:	SlsEiger::manage_lima_exception
 *
 *	description: method which manages lima exceptions
 */
    void manage_lima_exception(lima::Exception & in_exception, const std::string & in_caller_method_name);

protected :	
    // lima OBJECTS
    lima::SpectralInstrument::Interface * m_hw    ;
    lima::CtControl           * m_ct    ;
    lima::SpectralInstrument::Camera    * m_camera;
	bool                        m_is_device_initialized;
    stringstream                m_status_message       ;

	yat4tango::DynamicInterfaceManager m_dim;

/*----- PROTECTED REGION END -----*/	//	SpectralInstrument::Additional Method prototypes
};

/*----- PROTECTED REGION ID(SpectralInstrument::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	SpectralInstrument::Additional Classes Definitions

}	//	End of namespace

#endif   //	SpectralInstrument_H
