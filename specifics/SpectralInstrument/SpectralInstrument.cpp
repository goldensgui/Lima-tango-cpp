/*----- PROTECTED REGION ID(SpectralInstrument.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        SpectralInstrument.cpp
//
// description : C++ source for the Spectral Instrument class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               Spectral Instrument are implemented in this file.
//
// project :     Spectral Instrument detector TANGO specific device.
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================

// PROJECT
#include <SpectralInstrument.h>
#include <SpectralInstrumentClass.h>

//- YAT/YAT4TANGO
#include <yat4tango/InnerAppender.h>

/*----- PROTECTED REGION END -----*/	//	SpectralInstrument.cpp

/**
 *  Spectral Instrument class description:
 *    Device for detectors from Spectral Instruments. 
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  cooling         |  Tango::DevBoolean	Scalar
//  ccdTemperature  |  Tango::DevFloat	Scalar
//  readoutSpeed    |  Tango::DevEnum	Scalar
//================================================================

namespace SpectralInstrument_ns
{
/*----- PROTECTED REGION ID(SpectralInstrument::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	SpectralInstrument::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : SpectralInstrument::SpectralInstrument()
 *	Description : Constructors for a Tango device
 *                implementing the classSpectral
 */
//--------------------------------------------------------
SpectralInstrument::SpectralInstrument(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(SpectralInstrument::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	SpectralInstrument::constructor_1
}
//--------------------------------------------------------
SpectralInstrument::SpectralInstrument(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(SpectralInstrument::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	SpectralInstrument::constructor_2
}
//--------------------------------------------------------
SpectralInstrument::SpectralInstrument(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(SpectralInstrument::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	SpectralInstrument::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : SpectralInstrument::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void SpectralInstrument::delete_device()
{
	DEBUG_STREAM << "SpectralInstrument::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(SpectralInstrument::delete_device) ENABLED START -----*/
	
    INFO_STREAM << "Remove the inner-appender." << endl;
    yat4tango::InnerAppender::release(this);

    if(!m_is_device_initialized )
        return;

	/*----- PROTECTED REGION END -----*/	//	SpectralInstrument::delete_device
	delete[] attr_cooling_read;
	delete[] attr_ccdTemperature_read;
	delete[] attr_readoutSpeed_read;
}

//--------------------------------------------------------
/**
 *	Method      : SpectralInstrument::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void SpectralInstrument::init_device()
{
	DEBUG_STREAM << "SpectralInstrument::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(SpectralInstrument::init_device_before) ENABLED START -----*/
	INFO_STREAM << "SpectralInstrument::init_device() create device " << device_name << endl;

    m_is_device_initialized = false;
    set_state(Tango::INIT);
    m_status_message.str("");

    INFO_STREAM << "Create the inner-appender in order to manage logs." << endl;  
    yat4tango::InnerAppender::initialize(this, 512);

	try
	{
		//- get the main object used to pilot the lima framework		
		m_ct = ControlFactory::instance().get_control("SpectralInstrument");
		
		//- get interface to specific camera
		m_hw = dynamic_cast<lima::SpectralInstrument::Interface*>(m_ct->hwInterface());
		
		//- get camera to specific detector
		m_camera = &(m_hw->getCamera());
	}
	catch(Exception& e)
	{
        // we should create the properties even if there is a problem
        get_device_property();

        m_status_message << "Initialization Failed : " << e.getErrMsg() << endl;
		ERROR_STREAM << m_status_message.str();
		m_is_device_initialized = false;
		set_state(Tango::FAULT);
		return;
	}
	catch(...)
	{
        // we should create the properties even if there is a problem
        get_device_property();

        m_status_message << "Initialization Failed : UNKNOWN" << endl;
		ERROR_STREAM << m_status_message.str();
		set_state(Tango::FAULT);
		m_is_device_initialized = false;
		return;
	}

	/*----- PROTECTED REGION END -----*/	//	SpectralInstrument::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	attr_cooling_read = new Tango::DevBoolean[1];
	attr_ccdTemperature_read = new Tango::DevFloat[1];
	attr_readoutSpeed_read = new readoutSpeedEnum[1];
	/*----- PROTECTED REGION ID(SpectralInstrument::init_device) ENABLED START -----*/
	
    //	Initialize device
	m_is_device_initialized = true;
	set_state(Tango::STANDBY);
	dev_state();	
	
	/*----- PROTECTED REGION END -----*/	//	SpectralInstrument::init_device
}

//--------------------------------------------------------
/**
 *	Method      : SpectralInstrument::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void SpectralInstrument::get_device_property()
{
	/*----- PROTECTED REGION ID(SpectralInstrument::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
	
	/*----- PROTECTED REGION END -----*/	//	SpectralInstrument::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("ConnectionAddress"));
	dev_prop.push_back(Tango::DbDatum("ConnectionPort"));
	dev_prop.push_back(Tango::DbDatum("ImagePacketPixelsNb"));
	dev_prop.push_back(Tango::DbDatum("ImagePacketDelayMicroSec"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on SpectralInstrumentClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		SpectralInstrumentClass	*ds_class =
			(static_cast<SpectralInstrumentClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize ConnectionAddress from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  connectionAddress;
		else {
			//	Try to initialize ConnectionAddress from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  connectionAddress;
		}
		//	And try to extract ConnectionAddress value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  connectionAddress;

		//	Try to initialize ConnectionPort from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  connectionPort;
		else {
			//	Try to initialize ConnectionPort from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  connectionPort;
		}
		//	And try to extract ConnectionPort value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  connectionPort;

		//	Try to initialize ImagePacketPixelsNb from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  imagePacketPixelsNb;
		else {
			//	Try to initialize ImagePacketPixelsNb from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  imagePacketPixelsNb;
		}
		//	And try to extract ImagePacketPixelsNb value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  imagePacketPixelsNb;

		//	Try to initialize ImagePacketDelayMicroSec from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  imagePacketDelayMicroSec;
		else {
			//	Try to initialize ImagePacketDelayMicroSec from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  imagePacketDelayMicroSec;
		}
		//	And try to extract ImagePacketDelayMicroSec value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  imagePacketDelayMicroSec;

	}

	/*----- PROTECTED REGION ID(SpectralInstrument::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
    yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "127.0.0.1", "ConnectionAddress"       ); // 127.0.0.1 by default
    yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "0"        , "ConnectionPort"          ); // port 0 by default
    yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "512"      , "ImagePacketPixelsNb"     ); // 512 pixels in one packet by default
    yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "300"      , "ImagePacketDelayMicroSec"); // 300 �s between two packets by default
	
	/*----- PROTECTED REGION END -----*/	//	SpectralInstrument::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : SpectralInstrument::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void SpectralInstrument::always_executed_hook()
{
	//DEBUG_STREAM << "SpectralInstrument::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(SpectralInstrument::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
    try
    {
        m_status_message.str("");

		//- get the main object used to pilot the lima framework		
		m_ct = ControlFactory::instance().get_control("SpectralInstrument");
		
		//- get interface to specific camera
		m_hw = dynamic_cast<lima::SpectralInstrument::Interface*>(m_ct->hwInterface());
		
		//- get camera to specific detector
		m_camera = &(m_hw->getCamera());
        
        //update state
        dev_state();
    }
    catch (Exception& e)
    {
        m_status_message << "always_executed_hook : " << e.getErrMsg() << endl;
        ERROR_STREAM << m_status_message.str();
        //- throw exception
        set_state(Tango::FAULT);
        m_is_device_initialized = false;
        return;
    }
    catch (...)
    {
        m_status_message << "always_executed_hook : UNKNOWN" << endl;
        ERROR_STREAM << m_status_message.str();
        //- throw exception
        set_state(Tango::FAULT);
        m_is_device_initialized = false;
        return;
    }
	
	/*----- PROTECTED REGION END -----*/	//	SpectralInstrument::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : SpectralInstrument::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void SpectralInstrument::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "SpectralInstrument::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(SpectralInstrument::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	SpectralInstrument::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : SpectralInstrument::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void SpectralInstrument::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "SpectralInstrument::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(SpectralInstrument::write_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	SpectralInstrument::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute cooling related method
 *	Description: Turns the CCD cooling On/Off
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SpectralInstrument::read_cooling(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SpectralInstrument::read_cooling(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SpectralInstrument::read_cooling) ENABLED START -----*/
	//	Set the attribute value
	try
	{
		*attr_cooling_read = (Tango::DevBoolean) m_camera->getCoolingValue();
		attr.set_value(attr_cooling_read);
	}
    catch(Tango::DevFailed & df)
    {
        manage_devfailed_exception(df, "SpectralInstrument::read_cooling");
    }
    catch(Exception & e)
    {
        manage_lima_exception(e, "SpectralInstrument::read_cooling");
    }
	
	/*----- PROTECTED REGION END -----*/	//	SpectralInstrument::read_cooling
}
//--------------------------------------------------------
/**
 *	Write attribute cooling related method
 *	Description: Turns the CCD cooling On/Off
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SpectralInstrument::write_cooling(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "SpectralInstrument::write_cooling(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	/*----- PROTECTED REGION ID(SpectralInstrument::write_cooling) ENABLED START -----*/
	try
	{
        attr.get_write_value(attr_cooling_write);
		m_camera->setCoolingValue( (bool) attr_cooling_write);
	}
    catch(Tango::DevFailed & df)
    {
        manage_devfailed_exception(df, "SpectralInstrument::write_cooling");
    }
    catch(Exception & e)
    {
        manage_lima_exception(e, "SpectralInstrument::write_cooling");
    }
	
	/*----- PROTECTED REGION END -----*/	//	SpectralInstrument::write_cooling
}
//--------------------------------------------------------
/**
 *	Read attribute ccdTemperature related method
 *	Description: Camera temperature status (C)
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SpectralInstrument::read_ccdTemperature(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SpectralInstrument::read_ccdTemperature(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SpectralInstrument::read_ccdTemperature) ENABLED START -----*/
	
	try
	{
		*attr_ccdTemperature_read = (Tango::DevFloat) m_camera->getCCDTemperature();
		attr.set_value(attr_ccdTemperature_read);
	}
    catch(Tango::DevFailed & df)
    {
        manage_devfailed_exception(df, "SpectralInstrument::read_ccdTemperature");
    }
    catch(Exception & e)
    {
        manage_lima_exception(e, "SpectralInstrument::read_ccdTemperature");
    }
	
	/*----- PROTECTED REGION END -----*/	//	SpectralInstrument::read_ccdTemperature
}
//--------------------------------------------------------
/**
 *	Read attribute readoutSpeed related method
 *	Description: 
 *
 *	Data type:	Tango::DevEnum (readoutSpeedEnum)
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SpectralInstrument::read_readoutSpeed(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SpectralInstrument::read_readoutSpeed(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SpectralInstrument::read_readoutSpeed) ENABLED START -----*/
	//	Set the attribute value
	
	try
	{
		ushort readout_speed =  m_camera->getReadoutSpeed();
		Tango::DevShort* sh;

		switch(readout_speed)
		{
			case readoutSpeedValues::value_1MHZ : sh = (Tango::DevShort*) readoutSpeedEnum::_1MHZ; break;

			case readoutSpeedValues::value_690KHZ : sh = (Tango::DevShort*) readoutSpeedEnum::_690KHZ; break;

			default : 
				 break;
		}
		attr.set_value( (Tango::DevShort*) &sh );

	}
    catch(Tango::DevFailed & df)
    {
        manage_devfailed_exception(df, "SpectralInstrument::read_readoutSpeed");
    }
    catch(Exception & e)
    {
       manage_lima_exception(e, "SpectralInstrument::read_readoutSpeed");
    }
    
	/*----- PROTECTED REGION END -----*/	//	SpectralInstrument::read_readoutSpeed
}
//--------------------------------------------------------
/**
 *	Write attribute readoutSpeed related method
 *	Description: 
 *
 *	Data type:	Tango::DevEnum (readoutSpeedEnum)
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SpectralInstrument::write_readoutSpeed(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "SpectralInstrument::write_readoutSpeed(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	/*----- PROTECTED REGION ID(SpectralInstrument::write_readoutSpeed) ENABLED START -----*/
	try
	{
		ushort readout = 0;
        attr.get_write_value(attr_readout_speed_write);
		switch(attr_readout_speed_write)
		{
			case readoutSpeedEnum::_1MHZ : readout = readoutSpeedValues::value_1MHZ; break;

			case readoutSpeedEnum::_690KHZ : readout = readoutSpeedValues::value_690KHZ ; break;

			default : 
				 break;
		}
		m_camera->setReadoutSpeedValue( readout );
	}
    catch(Tango::DevFailed & df)
    {
        manage_devfailed_exception(df, "SpectralInstrument::write_readoutSpeed");
    }
    catch(Exception & e)
    {
        manage_lima_exception(e, "SpectralInstrument::write_readoutSpeed");
    }
	
	/*----- PROTECTED REGION END -----*/	//	SpectralInstrument::write_readoutSpeed
}

//--------------------------------------------------------
/**
 *	Method      : SpectralInstrument::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void SpectralInstrument::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(SpectralInstrument::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	SpectralInstrument::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Method      : SpectralInstrument::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void SpectralInstrument::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(SpectralInstrument::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	SpectralInstrument::add_dynamic_commands
}

/*----- PROTECTED REGION ID(SpectralInstrument::namespace_ending) ENABLED START -----*/

//	Additional Methods
//+------------------------------------------------------------------
/**
 *	method:	SpectralInstrument::dev_state
 *
 *	description:	method to execute "State"
 *	This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *
 * @return	State Code
 *
 */
//+------------------------------------------------------------------
Tango::DevState SpectralInstrument::dev_state()
{
    Tango::DevState	argout = DeviceImpl::dev_state();
    DEBUG_STREAM << "SpectralInstrument::dev_state(): entering... !" << endl;

    // Add your own code to control device here
    stringstream    DeviceStatus;
    DeviceStatus     << "";
    Tango::DevState DeviceState    = Tango::STANDBY;

    if(!m_is_device_initialized )
    {
        DeviceState  = Tango::FAULT;
        DeviceStatus << m_status_message.str();
    }
    else
    {
        // state & status are retrieved from Factory, Factory is updated by Generic device
        DeviceState = ControlFactory::instance().get_state();
        DeviceStatus << ControlFactory::instance().get_status();
    }

    set_state (DeviceState);
    set_status(DeviceStatus.str());

    return DeviceState;
}

//+------------------------------------------------------------------
/**
 *	method:	SpectralInstrument::manage_devfailed_exception
 *
 *	description: method which manages DevFailed exceptions
 */
//+------------------------------------------------------------------
void SpectralInstrument::manage_devfailed_exception(Tango::DevFailed & in_exception, const std::string & in_caller_method_name)
{
    ERROR_STREAM << in_exception << endl;
	
    // rethrow exception
    Tango::Except::re_throw_exception(in_exception,
                                      "TANGO_DEVICE_ERROR",
                                      string(in_exception.errors[0].desc).c_str(),
                                      in_caller_method_name.c_str());
}

//+------------------------------------------------------------------
/**
 *	method:	SpectralInstrument::manage_lima_exception
 *
 *	description: method which manages lima exceptions
 */
//+------------------------------------------------------------------
void SpectralInstrument::manage_lima_exception(lima::Exception & in_exception, const std::string & in_caller_method_name)
{
    ERROR_STREAM << in_exception.getErrMsg() << endl;

    // throw exception
    Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                   in_exception.getErrMsg().c_str(),
                                   in_caller_method_name.c_str());
}

/*----- PROTECTED REGION END -----*/	//	SpectralInstrument::namespace_ending
} //	namespace
